from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, BaseFilter, StateFilter
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from draft import search_name, search_en_name, random_film, get_info, get_facts, search_by_id
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from UCommands import get_id, cut_back
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
import os
from dotenv import load_dotenv, find_dotenv


class check_id(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        for i in message.text[4:]:
            if i not in '0123456789':
                return False
        return message.text[1:4] == 'id_'


load_dotenv(find_dotenv())

API_TOKEN: str = os.getenv('TOKEN')
engine = create_engine('mysql+pymysql://root:root@localhost:3306/new_schema')
Session = sessionmaker(bind=engine)
session = Session()

storage: MemoryStorage = MemoryStorage()
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp: Dispatcher = Dispatcher(storage=storage)


class FSMFillForm(StatesGroup):
    insert_film_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
button_1: KeyboardButton = KeyboardButton(text='–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º')
button_2: KeyboardButton = KeyboardButton(text='–†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[button_1], [button_2]],
    resize_keyboard=True,
    one_time_keyboard=True)
inline_button0: InlineKeyboardButton = InlineKeyboardButton(
    text='–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ',
    callback_data='button_0_pressed')
inline_button00: InlineKeyboardButton = InlineKeyboardButton(
    text='–ú–µ–Ω—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ',
    callback_data='button_00_pressed')
inline_button1: InlineKeyboardButton = InlineKeyboardButton(
    text='–û–ø–∏—Å–∞–Ω–∏–µ',
    callback_data='big_button_1_pressed')

inline_button2: InlineKeyboardButton = InlineKeyboardButton(
    text='–ü–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã',
    callback_data='big_button_2_pressed')
inline_button3: InlineKeyboardButton = InlineKeyboardButton(
    text='–¢—Ä–µ–π–ª–µ—Ä',
    callback_data='big_button_3_pressed')
inline_button4: InlineKeyboardButton = InlineKeyboardButton(
    text='–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —Ñ–∏–ª—å–º–µ',
    callback_data='big_button_4_pressed')
inline_button5: InlineKeyboardButton = InlineKeyboardButton(
    text='–°–∏–∫–≤–µ–ª—ã –∏ –ø—Ä–∏–∫–≤–µ–ª—ã',
    callback_data='big_button_5_pressed')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
inline_keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
    inline_keyboard=[[inline_button0],
                     [inline_button1, inline_button2],
                     [inline_button3, inline_button4]])
inline_keyboard2: InlineKeyboardMarkup = InlineKeyboardMarkup(
    inline_keyboard=[[inline_button00],
                     [inline_button1, inline_button2],
                     [inline_button3, inline_button4]])
inline_keyboard3: InlineKeyboardMarkup = InlineKeyboardMarkup(
    inline_keyboard=[[inline_button0],
                     [inline_button1, inline_button2],
                     [inline_button3, inline_button4],
                     [inline_button5]])
inline_keyboard4: InlineKeyboardMarkup = InlineKeyboardMarkup(
    inline_keyboard=[[inline_button00],
                     [inline_button1, inline_button2],
                     [inline_button3, inline_button4],
                     [inline_button5]])




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç CineBot!\n–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º',
                         reply_markup=keyboard)


@dp.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(text='–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ. –í—ã –≤–Ω–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π\n\n')


@dp.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤', reply_markup=keyboard)
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer(
        'üåü –õ–æ–≤–∏ –≥–æ—Ä—è—á–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤! üé¨üîé\n‚ú® /id_xxxx: –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.\nüí´ "–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º": –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –µ–≥–æ. –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–µ, –Ω–æ —Å—Ç–∞—Ä–∞–π—Å—è —Å–æ–±–ª—é–¥–∞—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª —Ç–æ—á–Ω—ã–º. –ï—Å–ª–∏ —á—Ç–æ, –ø–æ—Å–º–æ—Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ.\nüåü "–†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º": –¥–∞–π –º–Ω–µ —à–∞–Ω—Å —É–¥–∏–≤–∏—Ç—å —Ç–µ–±—è! –Ø –Ω–∞–π–¥—É —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–µ –º–µ–Ω–µ–µ 7.0 –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ –∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ü–µ–Ω–æ–∫ –Ω–µ –º–µ–Ω—å—à–µ 50 —Ç—ã—Å—è—á. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –∫ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É! üçøüéâ')


@dp.message(check_id())
async def search(message: Message):
    s = message.text[4:]
    id = int(s)
    line = search_by_id(id)
    if line is not None:
        txt = get_info(line)
        link = f'https://st.kp.yandex.net/images/film_big/{id}.jpg'
        if len(txt[5]) == 0:
            await bot.send_photo(message.chat.id, photo=link, caption=txt[0], reply_markup=inline_keyboard)
        else:
            await bot.send_photo(message.chat.id, photo=link, caption=txt[0], reply_markup=inline_keyboard3)
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


@dp.message(F.text == '–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º')
async def process_insert_film_name(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞', reply_markup=ReplyKeyboardRemove())
    await state.set_state(FSMFillForm.insert_film_name)


@dp.message(F.text == '–†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º', ~StateFilter(FSMFillForm.insert_film_name))
async def process_random_film(message: Message):
    line = random_film()
    id = line.id
    link = f'https://st.kp.yandex.net/images/film_big/{id}.jpg'
    txt = get_info(line)
    if len(txt[5]) == 0:
        await bot.send_photo(message.chat.id, photo=link, caption=txt[0], reply_markup=inline_keyboard)
    else:
        await bot.send_photo(message.chat.id, photo=link, caption=txt[0], reply_markup=inline_keyboard3)



@dp.callback_query(F.data == 'button_00_pressed')
async def process_button_1_press(callback: CallbackQuery):
    id = get_id(callback.message.caption)
    txt = get_info(search_by_id(id))
    if len(txt[5]) == 0:
        await callback.message.edit_caption(caption=txt[0], reply_markup=inline_keyboard)
    else:
        await callback.message.edit_caption(caption=txt[0], reply_markup=inline_keyboard3)

@dp.callback_query(F.data == 'button_0_pressed')
async def process_button_1_press(callback: CallbackQuery):
    id = get_id(callback.message.caption)
    txt = get_info(search_by_id(id))
    if len(txt[5]) == 0:
        await callback.message.edit_caption(caption=txt[4], reply_markup=inline_keyboard2)
    else:
        await callback.message.edit_caption(caption=txt[4], reply_markup=inline_keyboard4)


@dp.callback_query(F.data == 'big_button_1_pressed')
async def process_button_1_press(callback: CallbackQuery):
    id = get_id(callback.message.caption)
    description = get_info(search_by_id(id))[1]
    name = callback.message.caption
    name = name[:name.find('(') - 1]
    if len(description) > 0:
        description = f'<i><b>{name}</b></i>\n\n' + description
        await callback.message.reply(description, reply_markup=keyboard)
    else:
        description = f'–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∫ <i><b>{name}</b></i>\n\n'
        await callback.message.reply(description, reply_markup=keyboard)


@dp.callback_query(F.data == 'big_button_2_pressed')
async def process_button_1_press(callback: CallbackQuery):
    id = get_id(callback.message.caption)
    similar = get_info(search_by_id(id))[2]
    name = callback.message.caption
    name = name[:name.find('(') - 1]
    if len(similar) > 0:
        similar = f'–ü–æ—Ö–æ–∂–µ–µ –Ω–∞<i><b> {name}</b></i>\n\n' + similar
        await callback.message.reply(similar, reply_markup=keyboard)
    else:
        similar = f'–î–ª—è <i><b>{name}</b></i> –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ'
        await callback.message.reply(similar, reply_markup=keyboard)


@dp.callback_query(F.data == 'big_button_3_pressed')
async def process_button_1_press(callback: CallbackQuery):
    id = get_id(callback.message.caption)
    trailer = get_info(search_by_id(id))[3]
    name = callback.message.caption
    name = name[:name.find('(') - 1]
    if len(trailer) > 0:
        trailer = f'–¢—Ä–µ–π–ª–µ—Ä –∫ <i><b>{name}</b></i>\n\n' + trailer
        await callback.message.reply(trailer, reply_markup=keyboard)
    else:
        trailer = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å —Ç—Ä–µ–π–ª–µ—Ä–∞ –¥–ª—è <i><b>{name}</b></i>'
        await callback.message.reply(trailer, reply_markup=keyboard)


@dp.callback_query(F.data == 'big_button_4_pressed')
async def process_button_1_press(callback: CallbackQuery):
    id = get_id(callback.message.caption)
    facts = get_facts(id)
    name = callback.message.caption
    name = name[:name.find('(') - 1]
    if len(facts) > 0:
        if len(facts) > 2048:
            facts = cut_back(facts)
            await callback.message.reply(f'–§–∞–∫—Ç—ã –æ <i><b>{name}</b></i>\n\n' + facts[0],
                                         reply_markup=keyboard)
            for i in range(1, len(facts)):
                await callback.message.answer(facts[i], reply_markup=keyboard)
        else:
            facts = f'–§–∞–∫—Ç—ã –æ <i><b>{name}</b></i>\n\n' + facts
            await callback.message.reply(facts, reply_markup=keyboard)
    else:
        facts = f'–ù–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ <i><b>{name}</b></i>\n\n'
        await callback.message.reply(facts, reply_markup=keyboard)

@dp.callback_query(F.data == 'big_button_5_pressed')
async def process_button_1_press(callback: CallbackQuery):
    id = get_id(callback.message.caption)
    sequels = get_info(search_by_id(id))[5]
    name = callback.message.caption
    name = name[:name.find('(') - 1]
    if len(sequels) > 0:
        sequels = f'–°–≤—è–∑–∞–Ω–Ω–æ–µ —Å <i><b>{name}</b></i>\n\n' + sequels
        await callback.message.reply(sequels, reply_markup=keyboard)
    else:
        trailer = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏—á–µ–≥–æ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å <i><b>{name}</b></i>'
        await callback.message.reply(trailer, reply_markup=keyboard)

@dp.message(StateFilter(FSMFillForm.insert_film_name))
async def return_film_info(message: Message, state: FSMContext):
    text = message.text
    films = []
    if text != '':
        print(text)
        films = search_en_name(session, text)

    flag = True
    if text != '' and len(films) == 0:
        await message.answer('–§–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=keyboard)
    else:
        lst = ''
        for i in films:
            if flag:
                flag = False
                id = i.id
                link = f'https://st.kp.yandex.net/images/film_big/{id}.jpg'
            if i.ru_name != None:
                lst += i.ru_name
            else:
                lst += i.alternativeName
            lst += f' ({i.year}, —Ä–µ–π—Ç–∏–Ω–≥ –ö–ü: {i.rating_kp})   <i>/id_{i.id}</i>\n'
        if not flag:
            await bot.send_photo(message.chat.id, photo=link)
        await message.answer(lst, reply_markup=keyboard)
        await state.clear()


@dp.message()
async def process_name_command(message: Message):
    await message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º –≤—ã', reply_markup=keyboard)


if __name__ == '__main__':
    dp.run_polling(bot)
